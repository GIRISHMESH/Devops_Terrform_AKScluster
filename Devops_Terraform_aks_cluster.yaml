trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - terraform-manifests/*

pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - terraform-manifests/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  SERVICE_CONNECTION: 'terraform-aks-azurerm-svc-con'
  TERRAFORM_VERSION: '1.7.4'
  BACKEND_RG: 'terraform-storage-rg'
  BACKEND_STORAGE: 'terraformstatexlrwdrzs'
  BACKEND_CONTAINER: 'tfstatefiles'
  DEV_ENVIRONMENT: 'dev'
  QA_ENVIRONMENT: 'qa'
  PROD_ENVIRONMENT: 'prod'
  TF_WORKDIR: 'terraform-manifests'

stages:

# ---------------------------
# Stage 1: Generate SSH Keys & Validate Terraform
# ---------------------------
- stage: Prepare
  displayName: 'ðŸ”‘ Generate SSH Keys & Validate Terraform'
  jobs:
    - job: GenerateSSHKeys
      displayName: 'Generate SSH Key Pair'
      steps:
        - checkout: self

        # Generate SSH key pair
        - task: Bash@3
          displayName: 'Generate SSH Key Pair'
          inputs:
            targetType: 'inline'
            script: |
              mkdir -p $(Pipeline.Workspace)/ssh-keys
              ssh-keygen -t rsa -b 4096 -f $(Pipeline.Workspace)/ssh-keys/aks-ssh-key -N '' -C "aks-terraform-$(Build.BuildId)"
              echo "##vso[task.setvariable variable=SSH_PUBLIC_KEY;isOutput=true]$(cat $(Pipeline.Workspace)/ssh-keys/aks-ssh-key.pub)"
        
        - task: PublishBuildArtifacts@1
          displayName: 'Publish SSH Private Key (Secure)'
          inputs:
            PathtoPublish: '$(Pipeline.Workspace)/ssh-keys'
            ArtifactName: 'ssh-private-key'
            publishLocation: 'container'

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Terraform Manifests'
          inputs:
            PathtoPublish: '$(System.DefaultWorkingDirectory)/$(TF_WORKDIR)'
            ArtifactName: 'terraform-manifests'
            publishLocation: 'container'

    - job: ValidateTerraform
      displayName: 'Terraform Validation'
      dependsOn: GenerateSSHKeys
      steps:
        - download: current
          artifact: 'terraform-manifests'

        - task: TerraformInstaller@0
          displayName: 'Install Terraform $(TERRAFORM_VERSION)'
          inputs:
            terraformVersion: '$(TERRAFORM_VERSION)'

        - task: TerraformCLI@0
          displayName: 'Terraform Init'
          inputs:
            command: 'init'
            workingDirectory: '$(Pipeline.Workspace)/terraform-manifests'
            backendType: 'azurerm'
            backendServiceArm: '$(SERVICE_CONNECTION)'
            backendAzureRmResourceGroupName: '$(BACKEND_RG)'
            backendAzureRmStorageAccountName: '$(BACKEND_STORAGE)'
            backendAzureRmContainerName: '$(BACKEND_CONTAINER)'
            backendAzureRmKey: 'validation-aks.tfstate'

        - task: TerraformCLI@0
          displayName: 'Terraform Validate'
          inputs:
            command: 'validate'
            workingDirectory: '$(Pipeline.Workspace)/terraform-manifests'

# ---------------------------
# Stage 2: Deploy to Dev
# ---------------------------
- stage: DeployDev
  displayName: 'ðŸš€ Deploy to Development'
  dependsOn: Prepare
  condition: succeeded()
  jobs:
    - deployment: DeployDevAKS
      displayName: 'Deploy Dev AKS Cluster'
      environment: 'dev'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: 'terraform-manifests'
              - download: current
                artifact: 'ssh-private-key'

              - task: TerraformInstaller@0
                displayName: 'Install Terraform $(TERRAFORM_VERSION)'
                inputs:
                  terraformVersion: '$(TERRAFORM_VERSION)'

              - task: Bash@3
                displayName: 'Read SSH Public Key'
                inputs:
                  targetType: 'inline'
                  script: |
                    SSH_KEY_CONTENT=$(cat $(Pipeline.Workspace)/ssh-private-key/aks-ssh-key.pub)
                    echo "##vso[task.setvariable variable=SSH_PUBLIC_KEY_CONTENT;isOutput=true]$SSH_KEY_CONTENT"

              - task: TerraformCLI@0
                displayName: 'Terraform Init - Dev'
                inputs:
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests'
                  backendType: 'azurerm'
                  backendServiceArm: '$(SERVICE_CONNECTION)'
                  backendAzureRmResourceGroupName: '$(BACKEND_RG)'
                  backendAzureRmStorageAccountName: '$(BACKEND_STORAGE)'
                  backendAzureRmContainerName: '$(BACKEND_CONTAINER)'
                  backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'

              - task: TerraformCLI@0
                displayName: 'Terraform Plan - Dev'
                inputs:
                  command: 'plan'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests'
                  environmentServiceName: '$(SERVICE_CONNECTION)'
                  commandOptions: >-
                    -var="environment=$(DEV_ENVIRONMENT)"
                    -var="cluster_name=aks-$(DEV_ENVIRONMENT)-$(Build.BuildId)"
                    -var="ssh_public_key=$(SSH_PUBLIC_KEY_CONTENT)"
                    -out=tfplan.$(DEV_ENVIRONMENT).tfplan

              - task: TerraformCLI@0
                displayName: 'Terraform Apply - Dev'
                inputs:
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests'
                  environmentServiceName: '$(SERVICE_CONNECTION)'
                  commandOptions: '-auto-approve tfplan.$(DEV_ENVIRONMENT).tfplan'

# ---------------------------
# Stage 3: Deploy to QA
# ---------------------------
- stage: DeployQA
  displayName: 'ðŸ§ª Deploy to QA'
  dependsOn: DeployDev
  condition: succeeded()
  jobs:
    - deployment: DeployQAAKS
      displayName: 'Deploy QA AKS Cluster'
      environment: 'qa'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: 'terraform-manifests'
              - download: current
                artifact: 'ssh-private-key'

              - task: TerraformInstaller@0
                displayName: 'Install Terraform $(TERRAFORM_VERSION)'
                inputs:
                  terraformVersion: '$(TERRAFORM_VERSION)'

              - task: Bash@3
                displayName: 'Read SSH Public Key'
                inputs:
                  targetType: 'inline'
                  script: |
                    SSH_KEY_CONTENT=$(cat $(Pipeline.Workspace)/ssh-private-key/aks-ssh-key.pub)
                    echo "##vso[task.setvariable variable=SSH_PUBLIC_KEY_CONTENT;isOutput=true]$SSH_KEY_CONTENT"

              - task: TerraformCLI@0
                displayName: 'Terraform Init - QA'
                inputs:
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests'
                  backendType: 'azurerm'
                  backendServiceArm: '$(SERVICE_CONNECTION)'
                  backendAzureRmResourceGroupName: '$(BACKEND_RG)'
                  backendAzureRmStorageAccountName: '$(BACKEND_STORAGE)'
                  backendAzureRmContainerName: '$(BACKEND_CONTAINER)'
                  backendAzureRmKey: 'aks-$(QA_ENVIRONMENT).tfstate'

              - task: TerraformCLI@0
                displayName: 'Terraform Plan - QA'
                inputs:
                  command: 'plan'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests'
                  environmentServiceName: '$(SERVICE_CONNECTION)'
                  commandOptions: >-
                    -var="environment=$(QA_ENVIRONMENT)"
                    -var="cluster_name=aks-$(QA_ENVIRONMENT)-$(Build.BuildId)"
                    -var="ssh_public_key=$(SSH_PUBLIC_KEY_CONTENT)"
                    -out=tfplan.$(QA_ENVIRONMENT).tfplan

              - task: TerraformCLI@0
                displayName: 'Terraform Apply - QA'
                inputs:
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests'
                  environmentServiceName: '$(SERVICE_CONNECTION)'
                  commandOptions: '-auto-approve tfplan.$(QA_ENVIRONMENT).tfplan'

# ---------------------------
# Stage 4: Deploy to Prod
# ---------------------------
- stage: DeployProd
  displayName: 'ðŸš€ Deploy to Production'
  dependsOn: DeployQA
  condition: succeeded()
  jobs:
    - deployment: DeployProdAKS
      displayName: 'Deploy Prod AKS Cluster'
      environment: 'prod'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: 'terraform-manifests'
              - download: current
                artifact: 'ssh-private-key'

              - task: TerraformInstaller@0
                displayName: 'Install Terraform $(TERRAFORM_VERSION)'
                inputs:
                  terraformVersion: '$(TERRAFORM_VERSION)'

              - task: Bash@3
                displayName: 'Read SSH Public Key'
                inputs:
                  targetType: 'inline'
                  script: |
                    SSH_KEY_CONTENT=$(cat $(Pipeline.Workspace)/ssh-private-key/aks-ssh-key.pub)
                    echo "##vso[task.setvariable variable=SSH_PUBLIC_KEY_CONTENT;isOutput=true]$SSH_KEY_CONTENT"

              - task: TerraformCLI@0
                displayName: 'Terraform Init - Prod'
                inputs:
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests'
                  backendType: 'azurerm'
                  backendServiceArm: '$(SERVICE_CONNECTION)'
                  backendAzureRmResourceGroupName: '$(BACKEND_RG)'
                  backendAzureRmStorageAccountName: '$(BACKEND_STORAGE)'
                  backendAzureRmContainerName: '$(BACKEND_CONTAINER)'
                  backendAzureRmKey: 'aks-$(PROD_ENVIRONMENT).tfstate'

              - task: TerraformCLI@0
                displayName: 'Terraform Plan - Prod'
                inputs:
                  command: 'plan'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests'
                  environmentServiceName: '$(SERVICE_CONNECTION)'
                  commandOptions: >-
                    -var="environment=$(PROD_ENVIRONMENT)"
                    -var="cluster_name=aks-$(PROD_ENVIRONMENT)-$(Build.BuildId)"
                    -var="ssh_public_key=$(SSH_PUBLIC_KEY_CONTENT)"
                    -out=tfplan.$(PROD_ENVIRONMENT).tfplan

              - task: TerraformCLI@0
                displayName: 'Terraform Apply - Prod'
                inputs:
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests'
                  environmentServiceName: '$(SERVICE_CONNECTION)'
                  commandOptions: '-auto-approve tfplan.$(PROD_ENVIRONMENT).tfplan'
